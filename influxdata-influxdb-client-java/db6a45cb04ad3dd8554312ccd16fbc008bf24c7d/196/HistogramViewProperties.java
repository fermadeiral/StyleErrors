/*
 * Influx API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.DashboardColor;
import com.influxdb.client.domain.DashboardQuery;
import com.influxdb.client.domain.ViewProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * HistogramViewProperties
 */

public class HistogramViewProperties extends ViewProperties {
  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String text) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ShapeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape = ShapeEnum.CHRONOGRAF_V2;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HISTOGRAM("histogram");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.HISTOGRAM;

  public static final String SERIALIZED_NAME_X_COLUMN = "xColumn";
  @SerializedName(SERIALIZED_NAME_X_COLUMN)
  private String xColumn;

  public static final String SERIALIZED_NAME_FILL_COLUMNS = "fillColumns";
  @SerializedName(SERIALIZED_NAME_FILL_COLUMNS)
  private List<String> fillColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_X_DOMAIN = "xDomain";
  @SerializedName(SERIALIZED_NAME_X_DOMAIN)
  private List<Float> xDomain = new ArrayList<>();

  public static final String SERIALIZED_NAME_X_AXIS_LABEL = "xAxisLabel";
  @SerializedName(SERIALIZED_NAME_X_AXIS_LABEL)
  private String xAxisLabel;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_BIN_COUNT = "binCount";
  @SerializedName(SERIALIZED_NAME_BIN_COUNT)
  private Integer binCount;

   /**
   * Get shape
   * @return shape
  **/
  @ApiModelProperty(value = "")
  public ShapeEnum getShape() {
    return shape;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public HistogramViewProperties xColumn(String xColumn) {
    this.xColumn = xColumn;
    return this;
  }

   /**
   * Get xColumn
   * @return xColumn
  **/
  @ApiModelProperty(value = "")
  public String getXColumn() {
    return xColumn;
  }

  public void setXColumn(String xColumn) {
    this.xColumn = xColumn;
  }

  public HistogramViewProperties fillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
    return this;
  }

  public HistogramViewProperties addFillColumnsItem(String fillColumnsItem) {
    if (this.fillColumns == null) {
      this.fillColumns = new ArrayList<>();
    }
    this.fillColumns.add(fillColumnsItem);
    return this;
  }

   /**
   * Get fillColumns
   * @return fillColumns
  **/
  @ApiModelProperty(value = "")
  public List<String> getFillColumns() {
    return fillColumns;
  }

  public void setFillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
  }

  public HistogramViewProperties xDomain(List<Float> xDomain) {
    this.xDomain = xDomain;
    return this;
  }

  public HistogramViewProperties addXDomainItem(Float xDomainItem) {
    if (this.xDomain == null) {
      this.xDomain = new ArrayList<>();
    }
    this.xDomain.add(xDomainItem);
    return this;
  }

   /**
   * Get xDomain
   * @return xDomain
  **/
  @ApiModelProperty(value = "")
  public List<Float> getXDomain() {
    return xDomain;
  }

  public void setXDomain(List<Float> xDomain) {
    this.xDomain = xDomain;
  }

  public HistogramViewProperties xAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
    return this;
  }

   /**
   * Get xAxisLabel
   * @return xAxisLabel
  **/
  @ApiModelProperty(value = "")
  public String getXAxisLabel() {
    return xAxisLabel;
  }

  public void setXAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
  }

  public HistogramViewProperties position(String position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @ApiModelProperty(value = "")
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }

  public HistogramViewProperties binCount(Integer binCount) {
    this.binCount = binCount;
    return this;
  }

   /**
   * Get binCount
   * @return binCount
  **/
  @ApiModelProperty(value = "")
  public Integer getBinCount() {
    return binCount;
  }

  public void setBinCount(Integer binCount) {
    this.binCount = binCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramViewProperties histogramViewProperties = (HistogramViewProperties) o;
    return Objects.equals(this.shape, histogramViewProperties.shape) &&
        Objects.equals(this.type, histogramViewProperties.type) &&
        Objects.equals(this.xColumn, histogramViewProperties.xColumn) &&
        Objects.equals(this.fillColumns, histogramViewProperties.fillColumns) &&
        Objects.equals(this.xDomain, histogramViewProperties.xDomain) &&
        Objects.equals(this.xAxisLabel, histogramViewProperties.xAxisLabel) &&
        Objects.equals(this.position, histogramViewProperties.position) &&
        Objects.equals(this.binCount, histogramViewProperties.binCount) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shape, type, xColumn, fillColumns, xDomain, xAxisLabel, position, binCount, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramViewProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xColumn: ").append(toIndentedString(xColumn)).append("\n");
    sb.append("    fillColumns: ").append(toIndentedString(fillColumns)).append("\n");
    sb.append("    xDomain: ").append(toIndentedString(xDomain)).append("\n");
    sb.append("    xAxisLabel: ").append(toIndentedString(xAxisLabel)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    binCount: ").append(toIndentedString(binCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

