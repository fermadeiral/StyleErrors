// (c) Copyright 2017 Cloudera, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.cloudera.director.aws;

import static com.google.common.base.Preconditions.checkNotNull;

import com.cloudera.director.spi.v2.model.InstanceTemplate;
import com.google.common.collect.Lists;

import java.util.List;
import java.util.Map;

/**
 * Helper class for creating AWS tags with custom tag names.
 *
 * @param <T> the type of tag
 */
public abstract class AbstractAWSTagHelper<T> {

  /**
   * The custom tag mappings.
   */
  private final CustomTagMappings customTagMappings;

  /**
   * Creates an abstract AWS tag helper with the specified parameters.
   *
   * @param customTagMappings the custom tag mappings
   */
  public AbstractAWSTagHelper(CustomTagMappings customTagMappings) {
    this.customTagMappings = checkNotNull(customTagMappings, "customTagMappings is null");
  }

  /**
   * Returns the custom tag mappings.
   *
   * @return the custom tag mappings
   */
  public CustomTagMappings getCustomTagMappings() {
    return customTagMappings;
  }

  /**
   * Returns the name of the tag used to record the virtual instance ID as generated by Cloudera
   * Director.
   *
   * @return the name of the tag used to record the virtual instance ID as generated by Cloudera
   * Director
   */
  public String getClouderaDirectorIdTagName() {
    return customTagMappings.getClouderaDirectorIdTagName();
  }

  /**
   * Creates a tag with the specified key and value. The tag name may be overridden by the
   * custom tag mappings.
   *
   * @param tagKey   the tag key
   * @param tagValue the tag value
   * @return a tag whose name is determined by applying the custom tag mappings to the specified
   * tag key, and whose value is the specified value
   */
  public T createTag(String tagKey, String tagValue) {
    return createTagImpl(getCustomTagMappings().getCustomTagName(tagKey), tagValue);
  }

  /**
   * Creates an implementation-specific tag with the specified key and value.
   *
   * @param tagKey   the tag key
   * @param tagValue the tag value
   * @return an implementation-specific tag with the specified key and value
   */
  public abstract T createTagImpl(String tagKey, String tagValue);

  /**
   * Creates a tag for recording the specified virtual instance ID.
   *
   * @param virtualInstanceId the virtual instance ID as generated by Cloudera Director
   * @return a tag for recording the specified virtual instance ID
   */
  public T createClouderaDirectorIdTag(String virtualInstanceId) {
    return createTag(Tags.ResourceTags.CLOUDERA_DIRECTOR_ID.getTagKey(), virtualInstanceId);
  }

  /**
   * Creates a tag for recording the Cloudera Director template name.
   *
   * @param templateName the Cloudera Director template name
   * @return a tag for recording the Cloudera Director template name
   */
  public T createClouderaDirectorTemplateNameTag(String templateName) {
    return createTag(Tags.ResourceTags.CLOUDERA_DIRECTOR_TEMPLATE_NAME.getTagKey(), templateName);
  }

  /**
   * Returns the instance tags for an instance with the specified template and ID.
   *
   * @param template the instance template
   * @param virtualInstanceId the virtual instance ID as generated by Cloudera Director
   * @param userDefinedTags the user-defined tags
   * @return the instance tags for an instance with the specified template and ID
   */
  @SuppressWarnings("unchecked")
  public List<T> getInstanceTags(InstanceTemplate template, String virtualInstanceId,
      List<T> userDefinedTags) {
    List<T> tags = Lists.newArrayList(
        createTag(
            Tags.ResourceTags.RESOURCE_NAME.getTagKey(),
            String.format("%s-%s", template.getInstanceNamePrefix(), virtualInstanceId)),
        createClouderaDirectorIdTag(virtualInstanceId),
        createClouderaDirectorTemplateNameTag(template.getName())
    );
    tags.addAll(userDefinedTags);
    return tags;
  }

  /**
   * Returns the user-defined tags for the specified instance template.
   *
   * @param template the instance template
   * @return the user-defined tags for the specified instance template
   */
  public List<T> getUserDefinedTags(InstanceTemplate template) {
    List<T> userDefinedTags = Lists.newArrayListWithExpectedSize(template.getTags().size());
    for (Map.Entry<String, String> entry : template.getTags().entrySet()) {
      userDefinedTags.add(createTagImpl(entry.getKey(), entry.getValue()));
    }
    return userDefinedTags;
  }
}
