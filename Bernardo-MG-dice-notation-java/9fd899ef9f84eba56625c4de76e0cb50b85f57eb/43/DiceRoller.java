/**
 * Copyright 2014-2019 the original author or authors
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.bernardomg.tabletop.dice.transformer;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Stack;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bernardomg.tabletop.dice.Dice;
import com.bernardomg.tabletop.dice.notation.DiceNotationExpression;
import com.bernardomg.tabletop.dice.notation.operand.ConstantOperand;
import com.bernardomg.tabletop.dice.notation.operand.DiceOperand;
import com.bernardomg.tabletop.dice.notation.operation.BinaryOperation;
import com.bernardomg.tabletop.dice.notation.operation.DefaultOperation;
import com.bernardomg.tabletop.dice.notation.operation.Operation;
import com.bernardomg.tabletop.dice.random.NumberGenerator;
import com.bernardomg.tabletop.dice.random.RandomNumberGenerator;

/**
 * Dice notation expression which simulates rolling the expression.
 * <p>
 * As some values, such as dice, represent random numbers the transformer may
 * not return the same result each time it is executed for the same expression.
 * <p>
 * The random value will be generated by a {@link NumberGenerator} contained in
 * the transformer, which can be set through the constructor. Otherwise the
 * default one, a {@link RandomNumberGenerator}, will be used.
 * 
 * @author Bernardo Mart&iacute;nez Garrido
 *
 */
public final class DiceRoller implements DiceInterpreter<Integer> {

    /**
     * Logger.
     */
    private static final Logger   LOGGER = LoggerFactory
            .getLogger(DiceRoller.class);

    /**
     * The random numbers generator.
     * <p>
     * Combined with the data in the rolled this, this will generate a random
     * value in an interval.
     */
    private final NumberGenerator numberGenerator;

    /**
     * Default constructor.
     */
    public DiceRoller() {
        super();

        numberGenerator = new RandomNumberGenerator();
    }

    /**
     * Constructs a transformer using the received roller for simulating rolls.
     * 
     * @param generator
     *            the random number generator to use
     */
    public DiceRoller(final NumberGenerator generator) {
        super();

        numberGenerator = checkNotNull(generator,
                "Received a null pointer as generator");
    }

    @Override
    public final Integer transform(final DiceNotationExpression expression) {
        final Stack<DiceNotationExpression> exps;
        final Collection<DiceNotationExpression> ordered;
        final Iterator<DiceNotationExpression> ord;
        final Stack<Integer> values;
        Integer value;
        DiceNotationExpression current;
        Integer result;
        Integer v1;
        Integer v2;

        checkNotNull(expression, "Received a null pointer as expression");

        LOGGER.debug("Root expression {}", expression);

        ordered = new ArrayList<>();

        exps = new Stack<>();
        exps.push(expression);

        while (!exps.isEmpty()) {
            final DiceNotationExpression temp = exps.pop();
            if (temp instanceof BinaryOperation) {
                exps.push(new DefaultOperation(
                        ((BinaryOperation) temp).getOperation()));
                exps.push(((BinaryOperation) temp).getRight());
                exps.push(((BinaryOperation) temp).getLeft());
            } else {
                ordered.add(temp);
            }
        }

        values = new Stack<>();
        ord = ordered.iterator();
        result = 0;
        while (ord.hasNext()) {
            current = ord.next();
            if (current instanceof Operation) {
                v2 = values.pop();
                v1 = values.pop();
                value = ((Operation) current).getOperation().apply(v1, v2);
                values.push(value);
            } else if (current instanceof ConstantOperand) {
                values.push(((ConstantOperand) current).getValue());
            } else if (current instanceof DiceOperand) {
                values.push(transform(((DiceOperand) current)));
            } else {
                // TODO: ERROR
            }
        }

        if (values.isEmpty()) {
            result = 0;
        } else {
            result = values.pop();
        }

        return result;
    }

    /**
     * Generates a collection of random values from the received {@code Dice}.
     * <p>
     * These are returned in the same order they were generated.
     * 
     * @param dice
     *            the dice to roll
     * @return a collection of random values generated from the dice
     */
    private final Iterable<Integer> roll(final Dice dice) {
        final Collection<Integer> rolls; // Roll results
        final Integer quantity;
        final Boolean negative;

        checkNotNull(dice, "Received a null pointer as dice");

        if (dice.getQuantity() < 0) {
            quantity = 0 - dice.getQuantity();
            negative = true;
        } else {
            quantity = dice.getQuantity();
            negative = false;
        }

        rolls = new ArrayList<Integer>();
        for (Integer i = 0; i < quantity; i++) {
            if (negative) {
                rolls.add(0 - numberGenerator.generate(dice.getSides()));
            } else {
                rolls.add(numberGenerator.generate(dice.getSides()));
            }
        }

        return rolls;
    }

    /**
     * Returns the value from a dice operand.
     * <p>
     * This will generate a random value for each die in the dice set. The
     * actual random value will be generated by the dice roller.
     * 
     * @param operand
     *            operand to transform
     * @return a random value generated from the dice
     */
    private final Integer transform(final DiceOperand operand) {
        final Iterable<Integer> rolls;
        Integer total;

        rolls = roll(operand.getDice());

        total = 0;
        for (final Integer roll : rolls) {
            total += roll;
        }

        return total;
    }

}
